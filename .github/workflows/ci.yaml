name: CI

on: [push]

env:
  RUST_PROFILE: minimal
  RUST_VERSION: stable
  APP_NAME: chip-8-emu

jobs:
  build:
    name: Build (${{ matrix.triplet }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x86_64-unknown-linux-gnu
            artifact: chip-8-emu
            vcpkg_default_binary_cache: /home/runner/vcpkg-binary-cache
            vcpkg_archive_path: /home/runner/.xdg
            vcpkg_cache_archive_path: "~"
          - os: windows-latest
            triplet: x86_64-pc-windows-msvc
            artifact: chip-8-emu.exe
            vcpkg_default_binary_cache: $env:USERPROFILE/vcpkg-binary-cache
            vcpkg_archive_path: $env:LOCALAPPDATA
            vcpkg_cache_archive_path: $env:APPDATA
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Get vcpkg metadata
        uses: SebRollen/toml-action@v1.0.1
        id: vcpkg_metadata
        with:
          file: Cargo.toml
          field: package.metadata.vcpkg
      - name: Prepare vcpkg directories and cache key (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "VCPKG_CACHE_KEY=$(echo ${{ steps.vcpkg_metadata.outputs.value }} | sha256sum | tr -d '\n *-')" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_BINARY_CACHE=${{ matrix.vcpkg_default_binary_cache }}" >> $GITHUB_ENV
          echo "XDG_CACHE_HOME=${{ matrix.vcpkg_archive_path }}" >> $GITHUB_ENV
          mkdir -p ${{ matrix.vcpkg_default_binary_cache }}
          mkdir -p ${{ matrix.vcpkg_archive_path }}
          ls -la /home/runner
      - name: Prepare vcpkg directories and cache key (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $VCPKG_METADATA_HASH = [System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes('${{ steps.vcpkg_metadata.outputs.value }}'))).Replace("-", "").ToLower()
          "VCPKG_CACHE_KEY=$VCPKG_METADATA_HASH" >> $env:GITHUB_ENV
          "VCPKG_DEFAULT_BINARY_CACHE=${{ matrix.vcpkg_default_binary_cache }}" >> $env:GITHUB_ENV
          New-Item -ItemType Directory -Force -Path ${{ matrix.vcpkg_default_binary_cache }}
          Get-ChildItem $env:USERPROFILE | Format-Table
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
            ${{ matrix.vcpkg_archive_path }}/vcpkg/archives
            ${{ matrix.vcpkg_cache_archive_path }}/.cache/vcpkg/archives
          key: ${{ runner.os }}-vcpkg-${{ env.VCPKG_CACHE_KEY }}
      - name: Install Rust tools
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.triplet }}
          profile: ${{ env.RUST_PROFILE }}
          override: true
      - name: Cargo install cargo-vcpkg
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-vcpkg
      - name: Cache Cargo Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo vcpkg -v build
      - run: cargo build --release
      - name: Upload app
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.triplet }}
          path: ${{ github.workspace }}/target/release/${{ matrix.artifact }}
          retention-days: 1
  
  release:
    name: Release
    needs: build
    # if: ${{ contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions: 
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: |

          ls -R
      - name: Create Release
        run: |
          TAG_VERSION=${GITHUB_REF#refs/*/}
          gh release create $TAG_VERSION -d --generate-notes --latest -t "${{ env.APP_NAME }}-$TAG_VERSION" ./${{ env.APP_NAME }}*/*
